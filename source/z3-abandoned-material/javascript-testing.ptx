<paragraphs><title>JavaScript Testing</title>
	
	<figure xml:id="figure-simple-eigenvector">
		<caption>A simple eigenvector demonstration</caption>
		<interactive xml:id="interactive-simple-eigenvector" platform="javascript" width="60%" source="code/figures.js code/simple-ev.js" preview="figures/simple-eigenvector-preview.jpg">
			<slate xml:id="eigenvector" surface="canvas" />
			<instructions>
			<p>
				Let <m>\vec{x}</m> be represented by the red arrow,
				and <m>A\vec{x}</m> by the grey arrow,
				for some particular <m>2\times 2</m> matrix <m>A</m>.
				Drag the <em>tip</em> of the red arrow to see the grey arrow change.
			</p>
			</instructions>
		</interactive>
	</figure>

	<figure xml:id="figure-simple-js-script"> 
		<caption>A simple embedded script example</caption>
		<interactive aspect="6:2" xml:id="interactive-simple-js-script" platform="javascript">
			<slate aspect="6:2" xml:id="simple-js-script" surface="canvas" />
			<script>
				const canvas = document.getElementById("simple-js-script");
				const ctx = canvas.getContext("2d");
				ctx.font = "40px sans-serif";

				// Messages to cycle through
				const messages = ["Hello world", "Welcome to PreTeXt!", "JavaScript in action", "Enjoy coding!"];
				let currentIndex = 0;

				// Button dimensions
				const buttonX = 10, buttonY = 80, buttonWidth = 200, buttonHeight = 40;

				// Function to update the canvas text
				function updateCanvas() {
					ctx.clearRect(0, 0, canvas.width, canvas.height);

					// Draw message
					ctx.fillText(messages[currentIndex], 10, 50);

					// Draw button
					ctx.fillStyle = "lightgray";
					ctx.fillRect(buttonX, buttonY, buttonWidth, buttonHeight);
					ctx.strokeStyle = "black";
					ctx.strokeRect(buttonX, buttonY, buttonWidth, buttonHeight);

					// Draw button text
					ctx.fillStyle = "black";
					ctx.font = "20px sans-serif";
					ctx.fillText("Next Message", buttonX + 15, buttonY + 25);
				}

				// Handle mouse clicks
				canvas.addEventListener("click", function(event) {
					const rect = canvas.getBoundingClientRect();
					const x = event.clientX - rect.left;
					const y = event.clientY - rect.top;

					// Check if click is inside button
					if (x &gt;= buttonX &amp;&amp; x &lt;= buttonX + buttonWidth &amp;&amp;
						y &gt;= buttonY &amp;&amp; y &lt;= buttonY + buttonHeight) {
						currentIndex = (currentIndex + 1) % messages.length;
						updateCanvas();
					}
				});

				// Initial draw
				updateCanvas();
			</script>
		</interactive>
	</figure>

	<figure xml:id="figure-slideshow-test">
		<caption>Deriving the integrating factor for equation <xref ref="if-example-incomplete-eqn"/>.</caption>
		<!-- <interactive aspect="2.1:1" xml:id="if-derivation-interactive" platform="javascript"> -->
		<interactive xml:id="if-derivation-interactive-test" platform="javascript" aspect="2.1:1" source="code/if-example-slide-show-1.js" preview="figures/if-strategy-3.png">
			<slate aspect="2.1:1" xml:id="if-derivation-canvas-test" surface="canvas" />
			<instructions>
				<p>
					Piss off the teacher by not showing the full derivation.
				</p>
			</instructions>
		</interactive>
	</figure>

</paragraphs>