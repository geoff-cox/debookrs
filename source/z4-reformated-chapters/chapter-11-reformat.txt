<METADATA>
  <title>Laplace Transforms of Step and Piecewise Functions</title>
  <label>chap-laplace-step-piecewise</label>
  <overview>Introduces the unit step function and its variants, shows how to express piecewise functions using step functions, and develops Laplace transform rules that allow solving differential equations with switching or piecewise forcing terms.</overview>
  <dependencies>Builds on understanding of Laplace transform basics, linearity, and initial value problems, as well as comfort with algebra and piecewise functions.</dependencies>
</METADATA>

<overview>
  <p>This chapter equips you to handle problems where inputs switch on and off over time. You'll learn about the unit step function, extend it to flexible variants, and rewrite piecewise functions cleanly. Then we'll establish the Laplace transform rules for step functions and see how to solve differential equations with piecewise forcing terms.</p>
</overview>

<objectives>
  <ul>
    <li>Define the unit step function and explain its ON/OFF switching behavior.</li>
    <li>Use shifted, reversed, and windowed step functions to control when a function is active.</li>
    <li>Rewrite piecewise functions in a single formula using step functions.</li>
    <li>Apply Laplace transform rules for <m>u_c(t)</m>, <m>f(t) u_c(t)</m>, and <m>f(t-c) u_c(t)</m>.</li>
    <li>Transform and solve differential equations with piecewise forcing terms using the Laplace method.</li>
  </ul>
</objectives>

<core-narrative>

  <section label="unit-step-intro">
    <title>The Basic Unit Step Function</title>
    <overview>Introduces the Heaviside step function as a mathematical switch, showing how it flips from OFF to ON at <m>t=0</m> and how multiplying by it turns functions on or off.</overview>
    
    <examples>
      <example role="unit-step-switching">
        <title>Switching ON a Parabola</title>
        <statement>Show how <m>g(t) u(t)</m> turns off <m>g(t)</m> before <m>t=0</m> and turns it on afterward.</statement>
      </example>
    </examples>
    
    <section-summary>
      <ul>
        <li>The unit step function <m>u(t)</m> equals 0 before <m>t=0</m> and 1 afterward.</li>
        <li>Multiplying by <m>u(t)</m> <q>switches off</q> a function before <m>t=0</m> and <q>switches it on</q> at <m>t=0</m>.</li>
        <li>This ON/OFF idea extends to all other step function variants.</li>
      </ul>
    </section-summary>
  </section>

  <section label="unit-step-variants">
    <title>Step Function Variants</title>
    <overview>Presents shifted, reversed, and windowed unit step functions for flexible ON/OFF control at different times and intervals.</overview>
    
    <examples>
      <example role="shifted-step">
        <title>Shifted Switch</title>
        <statement>Explain how <m>u_c(t)</m> delays activation until <m>t=c</m>.</statement>
      </example>
      <example role="reversed-step">
        <title>Switching OFF</title>
        <statement>Use <m>1-u_c(t)</m> to turn a function OFF at <m>t=c</m>.</statement>
      </example>
      <example role="windowed-step">
        <title>ON for a Window</title>
        <statement>Demonstrate how <m>u_c(t)-u_d(t)</m> makes a function active only on <m>[c,d)</m>.</statement>
      </example>
    </examples>
    
    <section-summary>
      <ul>
        <li><m>u_c(t)</m> turns ON at <m>t=c</m>.</li>
        <li><m>1-u_c(t)</m> turns OFF at <m>t=c</m>.</li>
        <li><m>u_c(t)-u_d(t)</m> creates a window of ON from <m>c</m> to <m>d</m>.</li>
      </ul>
    </section-summary>
  </section>

  <section label="piecewise-functions">
    <title>Piecewise Functions with Step Functions</title>
    <overview>Shows how to combine step functions to express multi-interval piecewise functions as a single formula.</overview>
    
    <examples>
      <example role="piecewise-to-step">
        <title>Rewriting Piecewise Functions</title>
        <statement>Rewrite a three-piece function using <m>u_c(t)</m>, <m>1-u_c(t)</m>, and <m>u_c(t)-u_d(t)</m> switches.</statement>
      </example>
    </examples>
    
    <section-summary>
      <ul>
        <li>Step functions consolidate multi-piece definitions into one expression.</li>
        <li>Each piece is multiplied by the step switch that controls when it is ON.</li>
        <li>This setup makes Laplace transforms of piecewise functions straightforward.</li>
      </ul>
    </section-summary>
  </section>

  <section label="laplace-step-rules">
    <title>Laplace Transform Rules for Step Functions</title>
    <overview>Develops the three core rules for Laplace transforms of step functions, which will be applied throughout the rest of the chapter.</overview>

    <examples>
      <example role="lap-uc">
        <title>Transform of <m>u_c(t)</m></title>
        <statement>Show that <m>\lap{u_c(t)} = e^{-cs}/s</m>.</statement>
      </example>
      <example role="lap-ft-uc">
        <title>Transform of <m>f(t)u_c(t)</m></title>
        <statement>Derive <m>\lap{f(t)u_c(t)} = e^{-cs} \lap{f(t+c)}</m>.</statement>
      </example>
      <example role="lap-ftc-uc">
        <title>Transform of <m>f(t-c)u_c(t)</m></title>
        <statement>Derive <m>\lap{f(t-c)u_c(t)} = e^{-cs}F(s)</m> where <m>F(s)=\lap{f(t)}</m>.</statement>
      </example>
    </examples>

    <section-summary>
      <ul>
        <li>Rule L9: <m>\lap{u_c(t)} = e^{-cs}/s</m>.</li>
        <li>Rule L10: <m>\lap{f(t)u_c(t)} = e^{-cs}\lap{f(t+c)}</m>.</li>
        <li>Rule L11: <m>\lap{f(t-c)u_c(t)} = e^{-cs}F(s)</m>.</li>
      </ul>
    </section-summary>
  </section>

  <section label="transforming-piecewise">
    <title>Transforming Piecewise Functions</title>
    <overview>Shows how to rewrite, combine, and transform entire piecewise functions using the step function rules.</overview>

    <examples>
      <example role="piecewise-transform-example">
        <title>Laplace Transform of a Piecewise Function</title>
        <statement>Take <m>g(t)</m> with multiple pieces, rewrite it using step functions, and apply L9–L11 step by step.</statement>
      </example>
    </examples>

    <section-summary>
      <ul>
        <li>Step 1: Rewrite the function using step switches.</li>
        <li>Step 2: Simplify overlapping step terms.</li>
        <li>Step 3: Apply the Laplace rules term by term and sum the results.</li>
      </ul>
    </section-summary>
  </section>

  <section label="laplace-method-piecewise">
    <title>Laplace Method with Piecewise Forcing Terms</title>
    <overview>Applies the Laplace method to solve differential equations with piecewise forcing functions, uniting all previous ideas.</overview>

    <examples>
      <example role="piecewise-laplace-solve-1">
        <title>Solving an IVP with a Windowed Forcing Term</title>
        <statement>Work through the Laplace method for <m>y'' + 4y = g(t)</m> with <m>g(t)</m> ON for <m>1 ≤ t < 2</m> and OFF otherwise.</statement>
      </example>
      <example role="piecewise-laplace-solve-2">
        <title>Multi-Stage Forcing Example</title>
        <statement>Solve an equation where <m>g(t)</m> changes value three times, showing how step functions drive the solution.</statement>
      </example>
    </examples>

    <section-summary>
      <ul>
        <li>The Laplace method steps don't change — only the forcing function setup does.</li>
        <li>Step functions make the transform–solve–invert process seamless for switching inputs.</li>
      </ul>
    </section-summary>
  </section>

</core-narrative>

<cheatsheet>
  <formula>L9: <m>\lap{u_c(t)}=e^{-cs}/s</m>; L10: <m>\lap{f(t)u_c(t)}=e^{-cs}\lap{f(t+c)}</m>; L11: <m>\lap{f(t-c)u_c(t)}=e^{-cs}F(s)</m></formula>
  <workflow>Recognize ON/OFF → Rewrite piecewise as step → Apply L9–L11 term by term → Solve DEs as usual</workflow>
  <alerts>Always rewrite the forcing function first. Without step functions, piecewise Laplace problems become messy fast.</alerts>
</cheatsheet>

