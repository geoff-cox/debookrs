<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec-approx-fundamentals-explained"><title> Solution Approximation </title>

	<objectives>
		<introduction>
			<p>
				This section covers ...
			</p>
		</introduction>
		<ol>
			<li> Analytical vs Numerical Solutions </li>
			<li> What are you finding when you compute a numerical solution </li>
		</ol>
	</objectives>

	<p>
		Up to this point, we have explored various strategies for solving differential equations. For instance, applying the separation of variables or integrating factor methods to the equation
		<me>
			y' - 4xy = 0, \, y(0) = 2
		</me>
		yields the solution <m>y(x) = 2e^{x^2}</m>. This type of solution, expressible as an explicit function, is known as an analytical solution<fn>Also referred to as a closed-form solution.</fn>. Analytical solutions provide exact expressions of the system's behavior and are ideal when they can be found. However, many real-world problems yield differential equations too complex for analytical solutions, paving the way for numerical approximations.
	</p>

	<p>
		To introduce the concept of a numerical solution, let's plot the analytical solution <m>y = 2e^{-x^2}</m>.
	</p>

	<p>
		Numerical methods for differential equations involve computing a discrete set of points approximating the theoretical, often unknowable, analytical solution. This process enables us to sketch a piecewise linear or non-linear path mimicking the exact solution's curve. 
		<sidebyside widths="75%" margins="auto" valign="middle">
			<figure xml:id="analytical-vs-numerical-soln">
			<title>Comparative Visualization of Analytical and Numerical Solutions</title>
				<image source="images/approx-fig-02_black_x.png">
					<shortdescription>(True Solution vs. Numerical Approximation)</shortdescription>
				</image>
			</figure>
		</sidebyside>
	</p>

	<p>
		This shift towards numerical approximation is not just a workaround but a powerful approach that expands our capacity to solve differential equations arising in complex systems where exact solutions are not readily derivable. Euler's method, as we will see, is the entry point into this expansive field of computational mathematics, demonstrating how straightforward concepts can approximate solutions to complex problems.
	</p>

	<image width="70%">
		<latex-image>
			\begin{tikzpicture}

				% Define the start and end of the interval
				\def\a{0} % Start of the interval
				\def\b{5} % End of the interval
				\def\N{5} % Number of partitions

				% Draw the x-axis
				\draw[-&gt;,thick] (\a-0.5,0) -- (\b+1,0) node[right] {$x$};

				% Calculate step size
				\pgfmathsetmacro{\h}{(\b-\a)/\N}

				% Draw the partition points and labels
				\draw (\a + 0*\h,0.1) -- (\a + 0*\h,-0.1) node[below] {$x_{0}$};
				\draw (\a + 1*\h,0.1) -- (\a + 1*\h,-0.1) node[below] {$x_{1}$};
				\draw (\a + 2*\h,0.1) -- (\a + 2*\h,-0.1) node[below] {$x_{2}$};
				\draw 							(\a + 3*\h,-0.1) node[below] {$\ldots$};
				\draw (\a + 4*\h,0.1) -- (\a + 4*\h,-0.1) node[below] {$x_{N-1}$};
				\draw (\a + 5*\h,0.1) -- (\a + 5*\h,-0.1) node[below] {$x_{N}$};
				
				% Optionally, add labels for a and b
				\node[below] at (\a,-0.35) {$\uparrow$};
				\node[below] at (\a,-0.7) {$a$};
				\node[below] at (\b,-0.35) {$\uparrow$};
				\node[below] at (\b,-0.7) {$b$};

				% Add the label for each h
				\draw 			(\a + 0*\h,0.3) -- (\a + 0*\h,0.5);
				\draw[&lt;-]	(\a + 0*\h,0.4) -- (\a + 0.38*\h,0.4);
				c
				\draw[-&gt;] 	(\a + 0.62*\h,0.4) -- (\a + 1*\h,0.4);
				\draw 			(\a + 1*\h,0.3) -- (\a + 1*\h,0.5);

				\draw[&lt;-] 	(\a + 1*\h,0.4) -- (\a + 1.38*\h,0.4);
				\draw 			(\a + 1.5*\h,0.2) node[above] {$h$};
				\draw[-&gt;] 	(\a + 1.62*\h,0.4) -- (\a + 2*\h,0.4);
				\draw 			(\a + 2*\h,0.3) -- (\a + 2*\h,0.5);

				\draw 			(\a + 4*\h,0.3) -- (\a + 4*\h,0.5);
				\draw[&lt;-] 	(\a + 4*\h,0.4) -- (\a + 4.38*\h,0.4);
				\draw 			(\a + 4.5*\h,0.2) node[above] {$h$};
				\draw[-&gt;] 	(\a + 4.62*\h,0.4) -- (\a + 5*\h,0.4);
				\draw 			(\a + 5*\h,0.3) -- (\a + 5*\h,0.5);
				
			\end{tikzpicture}
		</latex-image>
	</image>


	<p>
		
		<image xml:id="fuckit">

			<latex-image>
				\begin{tikzpicture}
					
					\begin{axis}[
						xlabel={$x$},
						ylabel={$y$},
						title={Solution of $y' + 4xy = 0$ using Euler's Method},
						grid=both,
						minor tick num=1,
						axis lines=middle,
					]
					
					% Read and plot data from file
					\addplot [only marks, mark=o] table[x=x, y=y, col sep=comma] {external/data/euler-data-02.csv};

					\addplot [domain=0:2, samples=50, black] {2*e^(-x^2)};

					\end{axis}
					
				\end{tikzpicture}
			</latex-image>

		</image>

	</p>

	<p>

		<image>
			<latex-image>
			
				\begin{tikzpicture}
				
					set table  "../plots/pgfmanual-sine.table"
					set format "%.5f"
					set samples 20
					plot [x=0:10] sin(x)
					
					\begin{axis}[]
						% Draw the x-axis
						\draw[-&gt;,thick] (-1.5,0) -- (8,0) node[right] {$x$};
						\draw[-&gt;,thick] (0,-1.5) -- (0,1) node[right] {$y$};

						\addplot[
							samples at={0,0.5,1,1.5,2,2.5,3,3.5,4,4.5},
							&lt;-&gt;,
							smooth,
							thick,
							color = blue,
							mark = ball,
						]{x*e^(-0.5*x^2)};

						
						\addplot[
							samples at={0,0.5,1,1.5,2,2.5,3,3.5,4,4.5},
							&lt;-&gt;,
							smooth,
							thick,
							color = orange,
							mark = +,
						]{x*e^(-0.5*x^2) - 0.05*x};

						
						\addplot[
							only marks, mark size=1.5pt
						]coordinates{
							(0.0, 0.0000)
							(0.5, 0.2438)
							(1.0, 0.4524)
							(1.5, 0.5989)
							(2.0, 0.6703)
							(2.5, 0.6691)
							(3.0, 0.6099)
							(3.5, 0.5141)
							(4.0, 0.4038)
							(4.5, 0.2970)
						};
						\addplot[
							only marks, mark size=2.0pt, mark = +, color = orange,
						]coordinates{
							(0.0, 0.0000)
							(0.5, 0.24)
							(1.0, 0.44)
							(1.5, 0.54)
							(2.0, 0.62)
							(2.5, 0.60)
							(3.0, 0.55)
							(3.5, 0.51)
							(4.0, 0.46)
							(4.5, 0.34)
						};
						\draw (4.5, 0.34) node[above] {$\hat{y}_7$};
					\end{axis}
				\end{tikzpicture}
			</latex-image>
		</image>

		<image xml:id="pgfplots-shit1">
			<latex-image>

				\pgfplotstablenew[
					create on use/plot1/.style={
						create col/expr={sin (2*pi*\pgfplotstablerow)}
					},
					columns={plot1}
				]
				{500}
				\loadedtable
				\pgfplotstablesave{\loadedtable}{myplot.dat}


				\begin{tikzpicture}
				\begin{axis}[
						line join=bevel,
						mark = +,
						table/x expr={\coordindex},
						xmin=0,
						enlarge x limits=false,
						ymin=-1.5,
						ymax=1.5,
					]
				\addplot[red] table [y expr={\thisrow{plot1}}] {myplot.dat};
				\end{axis}

				\end{tikzpicture}
			</latex-image>
		</image>

	</p>

</section>